constellation
Minimum gifts
Railway Station 
count pairs
Hedger




zone 1 qns

Constellation
n=int(input())
l=[]
loop=1
j=0
for i in range(3):
    l.append(list(map(str,input().split(" "))))
while(loop):
    if l[0][j]=="#":
        print("#",end="")
        j+=1
    elif (l[0][j]==".") and (l[1][j]==".") and (l[2][j]=="."):
        j+=1
    elif (l[0][j]==".") and (l[0][j+1]=="*") and (l[0][j+2]=="."):
        print("A",end="")
        j+=3
    elif (l[1][j]=="*")and(l[1][j+1]=="*") and(l[1][j+2]=="*"):
        print("E",end="")
        j+=3
    elif (l[1][j]==".") and (l[1][j+1]=="*") and (l[1][j+2]=="."):
        print("I",end="")
        j+=3
    elif (l[1][j]=="*") and (l[1][j+1]==".") and (l[1][j+2]=="*"):
        if (l[0][j+1]=="*"):
            print("O",end="")
        elif(l[0][j+1]=="."):
            print("U",end="")
        j+=3
    if j>n-1:
        loop=0
        
        
       ((((((((((((((((((((( or)))))))))))))))))))))
        
        
n=int(input())
l=[]
loop=1
j=0
a=0
b=0
c=0
for i in range(3):
    l.append(list(map(str,input().split(" "))))
while(loop):
    a=l[0][j:j+3].count("*")
    b=l[1][j:j+3].count("*")
    c=l[2][j:j+3].count("*")
    if l[0][j]=="#":
        print("#",end="")
        j+=1
        a=l[0][j:j+3].count("*")
        b=l[1][j:j+3].count("*")
        c=l[2][j:j+3].count("*")
    elif (l[0][j]==".") and (l[1][j]==".") and (l[2][j]=="."):
        j+=1
        a=l[0][j:j+3].count("*")
        b=l[1][j:j+3].count("*")
        c=l[2][j:j+3].count("*")
    else:
        a=l[0][j:j+3].count("*")
        b=l[1][j:j+3].count("*")
        c=l[2][j:j+3].count("*")
    if (a+b+c)==7:
        if (a==2):
            print("U",end="")
        else:
            print("I",end="")
        j+=3
    elif(a+b+c)==8:
        print("O",end="")
        j+=3
    elif(a+b+c)==9:
        print("E",end="")
        j+=3
    elif(a+b+c)==6:
        print("A",end="")
        j+=3
    if j>n-1:
        loop=0
        
        
        
 
Input

18

* . * # * * * # * * * # * * * . * .

* . * # * . * # . * . # * * * * * *

* * * # * * * # * * * # * * * * . *

Output

U#O#I#EA

Input

12

* . * # . * * * # . * .

* . * # . . * . # * * *

* * * # . * * * # * . *

Output

U#I#A
-----------------------------------------------------------------------------------------------------------
Minimum Gifts
t=int(input())
for cases in range(t):
    n=int(input())
    rank=list(map(int,input().split()))
    gift=[1 for i in range(n)]
    for i in range(1,n):
        if (rank[i-1]>rank[i]) and(gift[i-1]<=gift[i]):
            gift[i-1]=1+gift[i]
            for j in range(i-1,0,-1):
                if(rank[j-1]>rank[j]) and(gift[j-1]<=gift[j]):
                    gift[j-1]=gift[j]+1
                else:
                    break
        elif(rank[i-1]<rank[i]) and (gift[i-1]>=gift[i]):
            gift[i]=1+gift[i-1]
    print(sum(gift))
    
Input

2
5
1 2 1 5 2
2
1 2

Output

7
3
----------------------------------------------------------------------------------------------------------
Railway Station
n=int(input())
arrive=[]
depart=[]
for train in range(n):
    a,b=map(int,input().split())
    arrive.append(a)
    depart.append(a+b)
arrive.sort()
depart.sort()
ans=1
platform=1
i,j=1,0
while(i<n and j<n):
    if arrive[i]<=depart[j]:
        platform+=1
        i+=1
    else:
        platform-=1
        j+=1
    ans=max(ans,platform)
print(ans)
Input 
3 
10 2
5 10 
13 5

Output 
2
----------------------------------------------------------------------------------------------
count pair

n,k=map(int,input().split())
l=list(map(int,input().split()))
ll=list(set(l))
ll.sort()
ct=0
if (ll[1]-ll[0]<=k):
    ct+=l.count(ll[0])
for i in range(1,len(ll)-1):
    if ((ll[i]-ll[i+1])<=k) or ((ll[i]-ll[i-1])<=k):
        ct+=l.count(ll[i])
if((ll[-1]-ll[-2])<k):
    ct+=l.count(ll[-1])
print(ct)            

Input

6 3
5 5 7 9 15 2

Output

5

------------------------------------------------------------------------------------------------------
Hedger
import re 

def market_cal(stocks_,costs_,profit_,counts_,results_):
   max_Index = profit_.index(max(profit_))

   max_Val = costs_[max_Index]

   for _ in range(int(stocks_[1])):
       if stocks_[2] > counts_ and stocks_[2]>=counts_ + max_Val:
           #print(stocks_[2]," >",counts_ ,"and", stocks_[2],">=",counts_ + max_Val,sep="")
           counts_ = counts_ + max_Val
           results_ = results_ + ((max_Val * profit_[max_Index]) / 100)
       else:
           print(int(results_))
           return results_
   #print(stocks_[2]," >",counts_ ,"and", stocks_[2],">=",counts_ + max_Val,sep="")
   profit_.pop(max_Index)
   costs_.pop(max_Index)
   market_cal(stocks_,costs_,profit_,counts_,results_)
stock = re.findall(r"[-+]?\d*\.\d+|\d+",input())
cost = re.findall(r"[-+]?\d*\.\d+|\d+",input())
profit = re.findall(r"[-+]?\d*\.\d+|\d+",input())
stocks_ = []
costs_ = []
profit_ = []
for x in stock:
   stocks_.append(float(x))
for x in cost:
   costs_.append(float(x))
for x in profit:
   profit_.append(float(x))
counts_ = 0
results_ = 0
val = market_cal(stocks_,costs_,profit_,counts_,results_)

Input

5 3 200
90 25.5 15.5 30.8 18.8
5 10 20 5.5 2.5

Output

20

Input

4 2 100
20 10 30 40
5 10 30 20

Output

26
----------------------------------------------------------------------------------------
